// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  email        String      @unique
  password     String
  role         Role        @default(user)
  contactNo    String
  fullName     String
  address      String
  profileImage String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Review       Review[]
  Booking      Booking[]
  FeedBack     FeedBack[]
  AddToCart    AddToCart[]

  @@map("users")
}

enum Role {
  user
  admin
  super_admin
}

model Service {
  id          String      @id @default(uuid())
  title       String
  description String
  image       String?
  price       String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Review      Review[]
  Booking     Booking[]
  FeedBack    FeedBack[]
  AddToCart   AddToCart[]

  @@map("services")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  review    String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Booking {
  id        String         @id @default(uuid())
  userId    String
  serviceId String
  date      String
  user      User           @relation(fields: [userId], references: [id])
  service   Service        @relation(fields: [serviceId], references: [id])
  status    BookingStatus? @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("bookings")
}

enum BookingStatus {
  PENDING
  APPROVED
  CANCELED
}

model FeedBack {
  id          String  @id @default(uuid())
  userId      String
  serviceId   String
  comments    String?
  suggestions String?
  User        User    @relation(fields: [userId], references: [id])
  Service     Service @relation(fields: [serviceId], references: [id])

  @@map("feedbacks")
}

model AddToCart {
  id        String @id @default(uuid())
  userId    String
  serviceId String

  User    User    @relation(fields: [userId], references: [id])
  Service Service @relation(fields: [serviceId], references: [id])

  @@map("addToCart")
}
